# -*- coding: utf-8 -*-
"""Churn_Modelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XTjkWL7c1tdQjcsN3V9HMsXsaN5IVabo
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

dataset=pd.read_csv('Churn_Modelling.csv')
X=dataset.iloc[:,3:13]
y=dataset.iloc[:,13]

dataset.head()

dataset.info()

values=dataset.IsActiveMember.value_counts()
labels=['Not Active','Active']

fig,ax=plt.subplots(figsize=(4,3),dpi=100)
explode=(0,0.10)

patches,texts,autotexts=ax.pie(values,labels=labels,autopct='%1.2f%%',
          startangle=90,explode=explode,colors=['tab:cyan','tab:olive'])

plt.setp(texts,color='black')
plt.setp(autotexts,size=10,color='white')
autotexts[1].set_color('white')
plt.show()

values=dataset.Exited.value_counts()
labels=['Not Exited','Exited']
fig,ax=plt.subplots(figsize=(4,3),dpi=100)
explode=(0,0.10)

patches,texts,autotexts=ax.pie(values,labels=labels,autopct='%1.2f%%',
          startangle=90,explode=explode,colors=['tab:cyan','tab:olive'])

plt.setp(texts,color='black')
plt.setp(autotexts,size=10,color='white')
autotexts[1].set_color('white')
plt.show()

values=dataset.Gender.value_counts()
labels=['Male','Female']

fig,ax=plt.subplots(figsize=(4,3),dpi=100)
explode=(0,0.10)

patches,texts,autotexts=ax.pie(values,labels=labels,autopct='%1.2f%%',
          startangle=90,explode=explode,colors=['tab:cyan','tab:olive'])

plt.setp(texts,color='black')
plt.setp(autotexts,size=10,color='white')
autotexts[1].set_color('white')
plt.show()

values=dataset.Geography.value_counts()
labels=['France','Germany','Spain']

fig,ax=plt.subplots(figsize=(4,3),dpi=100)
explode=(0,0.05,0.05)

patches,texts,autotexts=ax.pie(values,labels=labels,autopct='%1.2f%%',
startangle=90,explode=explode,colors=['tab:cyan','tab:olive','tab:green'])

plt.setp(texts,color='black')
plt.setp(autotexts,size=10,color='white')
autotexts[1].set_color('white')
autotexts[2].set_color('white')
plt.show()

import seaborn as sns
corr=dataset.corr()
sns.heatmap(corr,xticklabels=corr.columns,
            yticklabels=corr.columns,cmap="Greens")

geography=pd.get_dummies(X["Geography"],drop_first=True)
gender=pd.get_dummies(X['Gender'],drop_first=True)

X=pd.concat([X,geography,gender],axis=1)

X=X.drop(['Geography','Gender'],axis=1)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                        test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LeakyReLU,PReLU,ELU
from keras.layers import Dropout

classifier = Sequential()

classifier.add(Dense(units = 6, kernel_initializer = 'he_uniform',activation='relu',input_dim = 11))

classifier.add(Dense(units = 6, kernel_initializer = 'he_uniform',activation='relu'))

classifier.add(Dense(units = 1, kernel_initializer = 'glorot_uniform', activation = 'sigmoid'))

classifier.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

model_history=classifier.fit(X_train, y_train,validation_split=0.33, batch_size = 10, epochs = 100)

print(model_history.history.keys())

plt.plot(model_history.history['accuracy'],color ='red')
plt.plot(model_history.history['val_accuracy'],color ='green')
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(model_history.history['loss'],color ='red')
plt.plot(model_history.history['val_loss'],color ='green')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

y_pred

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

from sklearn.metrics import accuracy_score
score=accuracy_score(y_pred,y_test)
score

